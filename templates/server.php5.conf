location ~ \.php$ {
    # No tricks
    if (!-f $request_filename) {
        return 404;
    }
    
    fastcgi_split_path_info           ^(.+\.php)(/.+)$;
    fastcgi_pass                      127.0.0.1:9001;
    fastcgi_index                     index.php;
    
    fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name; # index.php or whatever is set as index
    fastcgi_param  QUERY_STRING       $query_string; # foo=123&bar=blahblah;
    
    # for POST requests
    fastcgi_param  REQUEST_METHOD     $request_method;
    fastcgi_param  CONTENT_TYPE       $content_type;
    fastcgi_param  CONTENT_LENGTH     $content_length;

    fastcgi_param  SCRIPT_NAME        $fastcgi_script_name; # /foo/bar.php?arg=baz
    fastcgi_param  REQUEST_URI        $request_uri;
    fastcgi_param  DOCUMENT_URI       $document_uri;
    fastcgi_param  DOCUMENT_ROOT      $document_root;
    fastcgi_param  SERVER_PROTOCOL    $server_protocol;

    #the two lines below are possible now because of the fastcgi_split_path_info function
    #fastcgi_param  PATH_INFO          $fastcgi_path_info;
    #fastcgi_param  PATH_TRANSLATED    $document_root$fastcgi_path_info;

    fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
    fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

    fastcgi_param  REMOTE_ADDR        $remote_addr;
    fastcgi_param  REMOTE_PORT        $remote_port;
    fastcgi_param  SERVER_ADDR        $server_addr;
    fastcgi_param  SERVER_PORT        $server_port;
    fastcgi_param  SERVER_NAME        $server_name;

    #PHP only, required if PHP was built with --enable-force-cgi-redirect
    #fastcgi_param  REDIRECT_STATUS    200;

    # This directive determines whether or not to transfer 4xx and 5xx errors back
    # to the client or to allow Nginx to answer with directive error_page
    fastcgi_intercept_errors            off;

    # This directive determines if current request to the FastCGI-server must be
    # aborted in case the client aborts the request to the server.
    fastcgi_ignore_client_abort         off;

    # Directive sets timeout period for connection with FastCGI-server.
    # It should be noted that this value can't exceed 75 seconds.
    fastcgi_connect_timeout             60;

    # Directive sets the amount of time for upstream to wait for a fastcgi process
    # to send data. Change this directive if you have long running fastcgi processes
    # that do not produce output until they have finished processing.
    # If you are seeing an upstream timed out error in the error log, then increase
    # this parameter to something more appropriate.
    fastcgi_send_timeout                180;
    fastcgi_read_timeout                180;

    # Sets the buffer size to 16k + 256 * 16k = 4112k. Anything greater than 4M
    # goes to disk
    fastcgi_buffers                     8 256k;

    # By default, the buffer size is equal to the size of one buffer in
    # fastcgi_buffers. This directive allows you to set it to an arbitrary value.
    fastcgi_buffer_size                 128k;

    #fastcgi_busy_buffers_size           256k;
    #fastcgi_temp_file_write_size        256k;
}
